// Express connection
const express = require('express');
const app = express();

// DB connection
const db = require('./localdb');   // Local db
//const db = require('./db');

// CORS Policy
const cors = require('cors');
app.use(cors({
  origin     : "*",
  methods    : ["GET", "POST"],
  credentials: true
}));


app.use(express.urlencoded({
    extended: true,
}));

app.use(express.json());


// Global variables
var number = 100;
var tempOTP = '';


// Dummy Data
const transactionRows = [{
    "id": "3168411663",
    "date": "2023-09-28",
    "time": "18:05",
    "description": "Top-up",
    "amount": "2691.84"
  }, {
    "id": "0493819959",
    "date": "2023-11-21",
    "time": "05:02",
    "description": "Top-up",
    "amount": "493.86"
  }, {
    "id": "5007381039",
    "date": "2023-06-12",
    "time": "13:09",
    "description": "Payment",
    "amount": "4342.70"
  }, {
    "id": "3088106392",
    "date": "2024-02-13",
    "time": "12:37",
    "description": "Top-up",
    "amount": "2813.59"
  }, {
    "id": "1140751379",
    "date": "2023-10-11",
    "time": "18:01",
    "description": "Top-up",
    "amount": "444.29"
  }, {
    "id": "2316623786",
    "date": "2023-11-26",
    "time": "22:53",
    "description": "Payment",
    "amount": "211.33"
  }, {
    "id": "7345134679",
    "date": "2023-06-09",
    "time": "10:30",
    "description": "Top-up",
    "amount": "3251.09"
  }, {
    "id": "7924725849",
    "date": "2023-08-25",
    "time": "13:12",
    "description": "Payment",
    "amount": "2585.33"
  }, {
    "id": "9628229036",
    "date": "2024-01-11",
    "time": "05:46",
    "description": "Payment",
    "amount": "1457.97"
  }, {
    "id": "8500069333",
    "date": "2023-12-06",
    "time": "20:12",
    "description": "Refund",
    "amount": "1199.81"
  }, {
    "id": "4152116854",
    "date": "2023-06-10",
    "time": "04:55",
    "description": "Refund",
    "amount": "4808.60"
  }, {
    "id": "4081744084",
    "date": "2024-01-23",
    "time": "17:48",
    "description": "Top-up",
    "amount": "3539.11"
  }, {
    "id": "3648482173",
    "date": "2023-12-19",
    "time": "10:33",
    "description": "Refund",
    "amount": "3195.80"
  }, {
    "id": "3529607835",
    "date": "2023-08-24",
    "time": "00:43",
    "description": "Refund",
    "amount": "358.49"
  }, {
    "id": "3597384706",
    "date": "2024-02-17",
    "time": "22:49",
    "description": "Refund",
    "amount": "3384.72"
  }, {
    "id": "3837687465",
    "date": "2023-12-11",
    "time": "20:46",
    "description": "Refund",
    "amount": "4006.26"
  }, {
    "id": "8316824159",
    "date": "2023-08-24",
    "time": "15:31",
    "description": "Top-up",
    "amount": "983.75"
  }, {
    "id": "9997797213",
    "date": "2024-01-14",
    "time": "18:42",
    "description": "Payment",
    "amount": "994.03"
  }, {
    "id": "9384848891",
    "date": "2024-03-03",
    "time": "20:37",
    "description": "Top-up",
    "amount": "4463.27"
  }, {
    "id": "4554452417",
    "date": "2023-12-04",
    "time": "00:01",
    "description": "Payment",
    "amount": "959.38"
  }, {
    "id": "9504591574",
    "date": "2023-08-20",
    "time": "22:33",
    "description": "Top-up",
    "amount": "4344.46"
  }, {
    "id": "7472405558",
    "date": "2024-02-25",
    "time": "90:30",
    "description": "Payment",
    "amount": "78.19"
  }, {
    "id": "6243681548",
    "date": "2023-09-04",
    "time": "23:34",
    "description": "Refund",
    "amount": "2073.00"
  }, {
    "id": "5101638455",
    "date": "2023-09-15",
    "time": "12:29",
    "description": "Refund",
    "amount": "1367.98"
  }, {
    "id": "3184324451",
    "date": "2024-03-07",
    "time": "12:35",
    "description": "Top-up",
    "amount": "3122.44"
  }, {
    "id": "8911395633",
    "date": "2024-05-18",
    "time": "05:02",
    "description": "Payment",
    "amount": "4697.27"
  }, {
    "id": "1998055647",
    "date": "2024-04-12",
    "time": "08:54",
    "description": "Payment",
    "amount": "266.99"
  }, {
    "id": "6058516161",
    "date": "2023-12-15",
    "time": "04:27",
    "description": "Top-up",
    "amount": "1352.19"
  }, {
    "id": "9901765420",
    "date": "2024-04-19",
    "time": "12:19",
    "description": "Top-up",
    "amount": "4429.20"
  }, {
    "id": "6953478373",
    "date": "2024-03-04",
    "time": "15:21",
    "description": "Refund",
    "amount": "4472.13"
  }, {
    "id": "5093741078",
    "date": "2023-07-28",
    "time": "00:13",
    "description": "Refund",
    "amount": "1456.69"
  }, {
    "id": "9112703303",
    "date": "2023-07-23",
    "time": "04:35",
    "description": "Top-up",
    "amount": "379.39"
  }, {
    "id": "5792120099",
    "date": "2024-02-05",
    "time": "12:35",
    "description": "Top-up",
    "amount": "4270.02"
  }, {
    "id": "2250082936",
    "date": "2024-02-24",
    "time": "04:17",
    "description": "Refund",
    "amount": "320.33"
  }, {
    "id": "3320001655",
    "date": "2023-09-27",
    "time": "17:17",
    "description": "Payment",
    "amount": "4207.88"
  }, {
    "id": "3926541709",
    "date": "2023-08-29",
    "time": "12:42",
    "description": "Refund",
    "amount": "3650.72"
  }, {
    "id": "4076335333",
    "date": "2024-03-05",
    "time": "04:58",
    "description": "Top-up",
    "amount": "4946.73"
  }, {
    "id": "9611627718",
    "date": "2023-09-27",
    "time": "15:02",
    "description": "Top-up",
    "amount": "3635.01"
  }, {
    "id": "4052461207",
    "date": "2023-10-02",
    "time": "06:56",
    "description": "Top-up",
    "amount": "2729.84"
  }, {
    "id": "6961288448",
    "date": "2024-03-17",
    "time": "07:02",
    "description": "Payment",
    "amount": "4322.93"
  }];

// Dummy data for table rows
const ticketRows = [{
    "id": "2735048624",
    "date": "2024-01-28",
    "from": "Bantul",
    "to": "Helsingborg",
    "status": "Used",
    "amount": 1511.28
  }, {
    "id": "4158355141",
    "date": "2024-05-28",
    "from": "Al Jadīd",
    "to": "Bārkhān",
    "status": "Used",
    "amount": 959.61
  }, {
    "id": "7080966116",
    "date": "2023-11-12",
    "from": "Tanjungrejo Lor",
    "to": "Calilegua",
    "status": "Available",
    "amount": 1234.53
  }, {
    "id": "2896893555",
    "date": "2024-02-25",
    "from": "Paulba",
    "to": "Qingchuan",
    "status": "Refunded",
    "amount": 248.85
  }, {
    "id": "5078276874",
    "date": "2024-04-23",
    "from": "Kirovs’k",
    "to": "Phoenix",
    "status": "Refunded",
    "amount": 1604.95
  }, {
    "id": "1470175037",
    "date": "2023-12-11",
    "from": "Pilar",
    "to": "Tagapul-an",
    "status": "Refunded",
    "amount": 154.46
  }, {
    "id": "8634285022",
    "date": "2023-10-22",
    "from": "Tatrang",
    "to": "Kunvald",
    "status": "Available",
    "amount": 1389.87
  }, {
    "id": "7348444687",
    "date": "2024-02-07",
    "from": "Savannah",
    "to": "Panawuan",
    "status": "Refunded",
    "amount": 422.15
  }, {
    "id": "5579200692",
    "date": "2024-04-27",
    "from": "San Jose",
    "to": "Staryy Urukh",
    "status": "Refunded",
    "amount": 1962.13
  }, {
    "id": "4733516169",
    "date": "2023-11-23",
    "from": "Kashihara",
    "to": "Santa Bárbara",
    "status": "Refunded",
    "amount": 1628.18
  }, {
    "id": "3248740566",
    "date": "2023-12-09",
    "from": "Željezno Polje",
    "to": "Naushki",
    "status": "Used",
    "amount": 737.75
  }, {
    "id": "5580212267",
    "date": "2023-08-17",
    "from": "Konibodom",
    "to": "El Potrero",
    "status": "Available",
    "amount": 703.52
  }, {
    "id": "7126960263",
    "date": "2024-02-28",
    "from": "Sumbersewu",
    "to": "Antananarivo",
    "status": "Available",
    "amount": 1157.46
  }, {
    "id": "0399458670",
    "date": "2024-03-09",
    "from": "Kusŏng",
    "to": "Santa Praxedes",
    "status": "Used",
    "amount": 1653.74
  }, {
    "id": "3795253403",
    "date": "2023-09-14",
    "from": "Huaping",
    "to": "Igbor",
    "status": "Available",
    "amount": 1944.14
  }, {
    "id": "3602638073",
    "date": "2024-01-12",
    "from": "Kizema",
    "to": "Janowiec",
    "status": "Used",
    "amount": 407.94
  }, {
    "id": "0617878854",
    "date": "2024-01-13",
    "from": "Cungapmimbo",
    "to": "Minji",
    "status": "Refunded",
    "amount": 352.04
  }, {
    "id": "9658246745",
    "date": "2023-10-11",
    "from": "Nanshe",
    "to": "Widorokandang",
    "status": "Used",
    "amount": 573.71
  }, {
    "id": "4541055112",
    "date": "2024-03-04",
    "from": "Rio Largo",
    "to": "Qian’an",
    "status": "Refunded",
    "amount": 1835.81
  }, {
    "id": "9836913173",
    "date": "2024-01-26",
    "from": "Jardim da Serra",
    "to": "Moorreesburg",
    "status": "Refunded",
    "amount": 1656.37
  }, {
    "id": "6556251186",
    "date": "2023-10-25",
    "from": "Ponggok",
    "to": "Zwierzyniec",
    "status": "Used",
    "amount": 415.97
  }, {
    "id": "2375268172",
    "date": "2023-09-25",
    "from": "Uva",
    "to": "København",
    "status": "Refunded",
    "amount": 1218.39
  }, {
    "id": "9200701701",
    "date": "2023-06-26",
    "from": "Rama",
    "to": "Shenshan",
    "status": "Available",
    "amount": 843.37
  }, {
    "id": "0955620724",
    "date": "2023-06-13",
    "from": "Xinji",
    "to": "Citarik",
    "status": "Refunded",
    "amount": 407.24
  }, {
    "id": "9125456024",
    "date": "2024-05-16",
    "from": "Batulawang",
    "to": "Bousso",
    "status": "Available",
    "amount": 1682.37
  }, {
    "id": "2496726457",
    "date": "2023-11-23",
    "from": "Mrkonjić Grad",
    "to": "Sungi Liput",
    "status": "Used",
    "amount": 1720.31
  }, {
    "id": "3844572732",
    "date": "2024-01-28",
    "from": "Linshui",
    "to": "Malanay",
    "status": "Refunded",
    "amount": 1689.42
  }, {
    "id": "3764749881",
    "date": "2023-10-12",
    "from": "Puncaktugu",
    "to": "Wolomoni",
    "status": "Available",
    "amount": 224.55
  }, {
    "id": "7405819052",
    "date": "2023-11-24",
    "from": "Emiliano Zapata",
    "to": "Topol’noye",
    "status": "Used",
    "amount": 110.91
  }, {
    "id": "3746823420",
    "date": "2023-07-12",
    "from": "Portland",
    "to": "Båstad",
    "status": "Refunded",
    "amount": 43.24
  }, {
    "id": "9588528461",
    "date": "2024-04-18",
    "from": "Dzaoudzi",
    "to": "Lugulu",
    "status": "Refunded",
    "amount": 1811.04
  }, {
    "id": "6375355788",
    "date": "2023-11-03",
    "from": "Artesianón",
    "to": "Kalávryta",
    "status": "Refunded",
    "amount": 1851.12
  }, {
    "id": "4091325920",
    "date": "2024-02-16",
    "from": "Gīdolē",
    "to": "Manhan",
    "status": "Available",
    "amount": 994.06
  }, {
    "id": "0429472331",
    "date": "2024-04-17",
    "from": "Jambubol",
    "to": "Makoua",
    "status": "Refunded",
    "amount": 580.19
  }, {
    "id": "2718086459",
    "date": "2024-02-04",
    "from": "Sikonge",
    "to": "Zaindainxoi",
    "status": "Available",
    "amount": 984.57
  }, {
    "id": "9725911083",
    "date": "2023-12-07",
    "from": "Stockholm",
    "to": "Labinot-Mal",
    "status": "Used",
    "amount": 179.85
  }, {
    "id": "2863055151",
    "date": "2024-06-03",
    "from": "Santa Luzia",
    "to": "Bodzentyn",
    "status": "Available",
    "amount": 572.83
  }, {
    "id": "7057270852",
    "date": "2023-09-10",
    "from": "Miaotang",
    "to": "Detroit",
    "status": "Refunded",
    "amount": 1072.58
  }, {
    "id": "6300568296",
    "date": "2023-07-10",
    "from": "Kamenka",
    "to": "Heiheba",
    "status": "Refunded",
    "amount": 1286.86
  }, {
    "id": "8991900216",
    "date": "2024-04-27",
    "from": "Międzyzdroje",
    "to": "Khenifra",
    "status": "Used",
    "amount": 546.09
  }]

// Test backend connection
app.get('/hello' , (req, res) => {
  const msg = "Hello I'm Node App!";
  console.log(msg);
  res.json(msg);
});

// DB Controls  
app.get('/test', (req, res)=>{
  console.log(`Testing`);

  const sql = 
    `DESCRIBE userlogs`;

  /*
    DESCRIBE userlogs
    
    ALTER TABLE userlogs
    MODIFY COLUMN date VARCHAR(20)

    CREATE TABLE userlogs (
    logID INT AUTO_INCREMENT NOT NULL UNIQUE,
    userID INT NOT NULL,
    mobile VARCHAR(11) NOT NULL,
    email VARCHAR(50) NOT NULL,
    device VARCHAR(10) NOT NULL,
    OS VARCHAR(15) NOT NULL,
    browser VARCHAR(15) NOT NULL,
    MAC VARCHAR(18) NOT NULL,
    IP VARCHAR(40) NOT NULL,
    date VARCHAR(20) NOT NULL,
    time VARCHAR(15) NOT NULL,
    country VARCHAR(20) NOT NULL,
    longitude FLOAT NOT NULL,
    latitude FLOAT NOT NULL,
    PRIMARY KEY (userID, MAC, browser) 
  */

  db.query(sql, (err, result)=>{
    if(err) {
      console.log(err.message);
    }
    else{
      res.json(result);
    }
  })
});


// Queries

// Related to userLogs table
app.post('/logs/users', (req, res) => {
    const { type, data } = req.body;

    // Check session Status (active or inactive)
    if(type === 'Log1'){
      console.log(`New Request::  type: ${type}    Searching about ${data.userID} on ${data.session.MAC}/${data.session.browser}`);
      var status = 'deactive';

      // If user is available in userlogs table, update it with session data and reply user availablity. Otherwise reply user availability.
      const sql = 
          `SELECT userID
           FROM userlogs
           WHERE userID = ? AND MAC = ? AND browser = ?`;

      const values = [data.userID, data.session.MAC, data.session.browser];

      db.query(sql, values, (err, result) => {
          if (err) {
              console.log(err.message);
              status = 'error';    
              res.json(status+'\n\n'); // Reply with 'error' in case of an error
          } 
          else {
              console.log(`Entry searched successfully!\nUsers: ${JSON.stringify(result)}`);
              if (result.length > 0) {
                  status = 'active';
              } else {
                  status = 'deactive';
              }
              console.log(`Server replies as userID: ${data.userID} with status: ${status}\n\n`);
              res.json(status);
          }
      });
    }

    // Session terminate
    else if (type === 'Log2') {
      console.log(`New Request::  type: ${type}    Terminate user ${data.userID} on ${data.MAC}/${data.browser}`);

      const sql =
          `DELETE FROM userlogs 
           WHERE userID = ? AND MAC = ? AND browser = ?`;

      const values = [data.userID, data.MAC, data.browser];
  
      db.query(sql, values, (err, result) => {
          //console.log(`Session is terminated successfully!\nuserID: ${JSON.parse(data.userID)} browser: ${data.browser} MAC:${data.MAC}`);
          if (err) {
              console.log(err.message+'\n\n');
          } else {
              console.log("Entry deleted successfully!\n\n");
          }
      });
    }

    // Here you might want to save the user log to the db (request comming from login page)
    else if(type === 'Log3'){
        console.log(`New Request::  type: ${type}    \nSuccessful login!  userId: ${JSON.stringify(data)}`);
      const sql = `
          INSERT INTO userlogs (
              userID, mobile, email, device, OS, browser, MAC, IP, date, time, country, longitude, latitude
          )
          VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
          ON DUPLICATE KEY UPDATE
              IP = VALUES(IP),
              date = VALUES(date),
              time = VALUES(time),
              country = VALUES(country),
              longitude = VALUES(longitude),
              latitude = VALUES(latitude);
      `;

const values = [
    data.userID, data.mobile, data.email, data.sessionData.device, data.sessionData.OS, data.sessionData.browser, data.sessionData.MAC, 
    data.sessionData.IP, data.sessionData.date, data.sessionData.time, data.sessionData.country, data.sessionData.longitude, data.sessionData.latitude
];

db.query(sql, values, (err, result) => {
    if (err) {
        console.log(err.message);
    } else {
        console.log("Entry added or updated successfully!");
    }
});

/*
        let sql = 
            	`SELECT logID 
               FROM userlogs
               WHERE userID = ? AND MAC = ? AND browser = ?`;

        let values = [data.userID, data.sessionData.MAC, data.sessionData.browser ]

        db.query(sql, values, (err, result) => {
            if (err) {
            console.log(err.message+'\n\n');
            } else {
              console.log("Entry searched successfully!");
              if (result.length > 0){
                sql = 
                    `UPDATE userlogs
                    SET IP = ?, date = ?, time = ?, country = ? , longitude = ?, latitude = ?
                    WHERE logID = ?`;

                values = result[0];
              }
              else {
                sql = `INSERT INTO userlogs (userID, mobile, email, device, OS, browser, MAC, IP, date, time, country, longitude, latitude) VALUES (?)`;
                values = [data.userID, data.mobile, data.email, data.sessionData.device, data.sessionData.OS, data.sessionData.browser, data.sessionData.MAC, data.sessionData.IP, data.sessionData.date, data.sessionData.time, data.sessionData.country, data.sessionData.longitude, data.sessionData.latitude];
              }
              
              db.query(sql, [values], (err, result) => {
                if (err) {
                  console.log(err.message + '\n\n')
                }
                else {
                  console.log('Entry added successfully!');
                }
              })
            }
        });
      */
    }

    // Requesting device data from devises
    else if (type === 'Log4'){
      console.log(`Type: ${type}   userID: ${data}`);

      const sql = 
          `SELECT logID, device, MAC, OS, browser, country, date, time
           FROM userlogs
           WHERE userID = ?`;

      db.query(sql, data, (err, result)=>{
          if (err) {
              console.log(err.message+'\n\n');
              res.json('error');
          } else {
              console.log(`Entry searched successfully!\ndevices: ${JSON.stringify(result)}\n\n`);
              res.json(result);
          }
      })
    }
});

// Related to OTP handling
app.post('/OTP', (req, res) => {
    const { type, data } = req.body;

    // Here you might want to generate an OTP and save it
    if(type === 'loginOTP'){
        tempOTP = `eco${number}`;
        console.log(`New Request::  type: ${type}    Mobile Number: ${data.mobile}   Email: ${data.email}\n   OTP:: ${tempOTP}\n\n`);
        //res.send(`eco${number}`);
    }

    else if(type === 'signupOTP'){
        tempOTP = `new${number}`;
        console.log(`New Request::  type: ${type}    Mobile Number: ${data.mobile}   Email: ${data.email}\n   OTP:: ${tempOTP}\n\n`);
    }

    else if (type === 'request'){
      tempOTP = `upd${number}`;
      console.log(`Request OTP::  type: ${type}    Data: ${JSON.stringify(data)}\n\n`);
    }

    else if (type === 'verify'){
      tempOTP = tempOTP || 'upd100';
      const reply = (data.value === tempOTP) ? 'true' : 'false';
      console.log(`Authentication::  type: ${type}    Data: ${JSON.stringify(data)}\nUser OTP: ${data.value}   Server OTP: ${tempOTP}    Auth Reply:: ${reply}\n\n`);
      res.send(reply);
    }
});

// Related to userTable table
app.post('/users', (req, res) => {
    const { type, data } = req.body;
    
    // Here you might want to find userID, email userType, empType from DB and send back to the frontend (request comming from login page)
    if (type === 'Req1') {
        console.log(`New Request::  type: ${type}    Mobile Number: ${data}`);

        var userData = {};

        const sql = 
            `SELECT userID, userType, empType, email 
             FROM users
             WHERE mobile = ?`;

        db.query(sql, data, (err, result) => {
            if (err) {
                console.log(err.message + '\n\n');
                userData.userID   = 'error';    
                userData.userType = 'error';
                userData.empType  = 'error';
                userData.email    = 'error';
                res.json(userData); // Reply with 'error' in case of an error
            } 
            else {
                console.log(`Entry searched successfully!\nUsers: ${JSON.stringify(result)}`);
                if (result.length > 0) {
                    userData = result[0];
                } else {
                    userData.userID   = 'invalid';    
                    userData.email    = 'invalid';
                    userData.userType = 'invalid';
                    userData.empType  = 'invalid';
                }
                console.log(`Server replies as userID: ${userData.userID} with email: ${userData.email}\n\n`);
                res.json(userData);
            }
        });
    }

    // Here you might want to find user availability from DB and send back to the frontend (request comming from signup page)
    else if (type === 'Req2') {
        console.log(`New Request::  type: ${type}        Mobile Number: ${data.mobile}   Email: ${data.email}`);
        var userAvailability = 'none';

        const sql = `SELECT userID FROM users WHERE email = ? OR mobile = ?`;
        const values = [data.email, data.mobile];

        db.query(sql, values, (err, result) => {
            if (err) {
                console.log(err.message+'\n\n');
                res.json(userAvailability); // Reply with 'none' in case of an error
            } else {
                console.log(`Entry searched successfully!\nUsers: ${JSON.stringify(result)}`);
                if (result.length > 0) {
                    userAvailability = 'false';
                } else {
                    userAvailability = 'true';
                }
                console.log(`Server replies as userAvailability: ${userAvailability}\n\n`);
                res.json(userAvailability);
            }
        });
        
    }

    // Save registed data into db
    else if (type === 'Req3') {
      let sql='';
      let values=[];
      switch (data.userType) {
        case 'passenger':
          // Query for passenger
          sql =
          `INSERT INTO users (userType, empType, fName, lName, email, mobile)
           VALUES (?)`;
          values = [data.userType, data.empType, data.fName, data.lName, data.email, data.mobile];
          break;

        case 'employee':
          // Query for employee
          sql =
          `INSERT INTO users (userType, empType, fName, lName, email, mobile, nic, birthDay, ntc, licence)
           VALUES (?)`;
          values = [data.userType, data.empType, data.fName, data.lName, data.email, data.mobile, data.nic, data.birthDay, data.ntc, data.licence];
          break;
      
        case 'owner':{
          if(data.empType !== 'None'){
            // Query for owner does not work as an employee
            sql =
            `INSERT INTO users (userType, empType, fName, lName, email, mobile, nic, birthDay, ntc, licence, accName, accNo, bank, branch)
             VALUES (?)`;
            values = [data.userType, data.empType, data.fName, data.lName, data.email, data.mobile, data.nic, data.birthDay, data.ntc, data.licence, data.accName, data.accNo, data.bank, data.branch];
          }
          else{
            // Query for owner work as an employee
            sql =
            `INSERT INTO users (userType, empType, fName, lName, email, mobile, nic, birthDay, accName, accNo, bank, branch)
             VALUES (?)`;
            values = [data.userType, data.empType, data.fName, data.lName, data.email, data.mobile, data.nic, data.birthDay, data.accName, data.accNo, data.bank, data.branch];
          }
          break;
        }
        
        default:
          break;
      }
      db.query(sql, [values], (err, res) => {
        if (err) {
        console.log(err.message+'\n\n');
        } else {
        console.log("Entry added successfully!\n\n");
        }
      });
    }

    // Get data for the general page
    else if (type === 'Req4') {
        console.log(`New Request (Genertal Page) ::  type: ${type}        UserID: ${data}`);         

        // Write a query and get from db
        const userData = {
            name: 'John Doe', 
            role: 'Passenger',
            mobile: '+94 701 234 567',
            email: 'johndoe@gmail.com',
            rides: '250',
            tickets: '5',
            credits: 'LKR 500'
        }

        console.log(`Server Replies to ${data} as ${JSON.stringify(userData)}`)
        return res.json(userData);
    }

    // Get all personal details of the user
    else if (type === 'Req5') {
      /* // Dummy Data
      const userData = {
        userId    : 'userID',
        userType  : 'passenger',
        empType   : 'None',
        fName     : 'John',
        lName     : 'Doe',
        email     : 'johndoe@gmail.com',
        mobile    : '+94 70134567',
        nic       : '200456789105',
        birthDay  : '2004-05-24',
        ntc       : '',
        licence   : '',
        accName   : '',
        accNo     : '',
        bank      : "Peoples' Bank",
        branch    : '',
        licenceFile: [], 
        passbook: null
      }; */
      console.log(`New Request (Settings Page) ::  type: ${type} \nUser ${data} is requested his infomation.`);

      const sql = 
            `SELECT * FROM users WHERE userID = ?`;

        db.query(sql, data, (err, result) => {
            if (err) {
                console.log(err.message + '\n\n');
                return res.json('error'); // Reply with 'error' in case of an error
            } 
            else {
                console.log(`Entry searched successfully!\nUsers: ${JSON.stringify(result[0])}`);
                if (result.length > 0) {
                  return res.json(result[0]);
                } else {
                  return res.json('invalid');    
                }
                //console.log(`Server replies as userID: ${userData.userID} with email: ${userData.email}\n\n`);
                //res.json(userData);
            }
        });
      /* console.log(`Server Replies to ${data} as ${JSON.stringify(userData)}`)
      return res.json(userData); */
    }

    // Check availability of new data
    else if (type === 'Req6') {
      console.log(`New Request (Settings Page) ::  type: ${type} \nChecking Availability:: ${JSON.stringify(data)}`);
      if (data.fName === 'John'){
        return res.json('email');
      }
      else if(data.fName === 'Doe') {
        return res.json('mobile')
      }
      else if(data.fName === 'Hello') {
        return res.json('emailMobile')
      }
      else if(data.fName === 'world') {
        return res.json('invalid')
      }
      else if(data.fName === 'default') {
        return res.json('default')
      }
      else {
        return res.json('success');
      }
    }
});

// Related to transaction table
app.post('/transactions', (req, res)=>{
    const { type, data } = req.body;

    // Requesting transaction history from db
    if(type === 'Trans1'){
        console.log(`Transaction Request:: type: ${type}  userID: ${data}`);

        // Edit here with suitable query
        const transactions = {
            credits: 500,
            filterList: ['Payment', 'Top-Up', 'Refund'],
            transaction: transactionRows
        }

        return  res.json(transactions);
    }
})

// Related to ticket table
app.post('/tickets', (req, res)=>{
    const { type, data } = req.body;

    // Requesting ticket history from db
    if(type === 'Tkt1'){
      console.log(`Ticket Request:: type:${type}  userID: ${data}`);

      // Edit here with suitable query
      const tickets = {
        available: 5,
        filterList: ['Available', 'Used', 'Refunded'],
        tickets: ticketRows
      }

      return  res.json(tickets);
    }
    else if(type === 'Tkt2'){
      console.log(`Invoice Request:: type: ${type}  Ref.No.: ${data}`);

      // Edit here with suitable query
      const invoiceData = {
        ticketNo: data,
        customerName: 'John\u00a0Doe',
        customerEmail: 'Johndoe@gmail.com',
        customerMobile: '+94\u00a070-1523456',
        issuedDate: '2024-05-01',
        issuedTime: '15:06:49',
        vehicalNo: 'NC-1550',
        type: 'Normal',
        routeNo: '602',
        route: 'Kandy-Kurunegala',
        date: '2024-05-05',
        time: '15:30',
        from: 'Kurunegala',
        to: 'Kandy',
        journey: '43.00',
        price: '195.00',
        full: 2,
        half: 1,
        seatNos: '12, 15, 54'
      };

      return  res.json(invoiceData);
    }
})

module.exports = app;
